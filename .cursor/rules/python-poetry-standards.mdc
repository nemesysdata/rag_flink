---
description: 
globs: 
alwaysApply: false
---
# Python and Poetry Standards

All projects in this repository must use Python 3.13 with Poetry as the package manager. This ensures consistency across all services and simplifies dependency management.

## Python Version

- Python 3.13 is required for all projects
- Use `pyproject.toml` for project configuration
- Virtual environments should be managed by Poetry

## Poetry Configuration

Each project must include:

- `pyproject.toml` - Project configuration and dependencies
- `poetry.lock` - Locked dependencies (do not edit manually)
- `.python-version` - Python version specification

### Basic `pyproject.toml` Structure

```toml
[tool.poetry]
name = "service-name"
version = "0.1.0"
description = "Service description"
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.13"
# Add your dependencies here

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
black = "^23.0"
isort = "^5.0"
flake8 = "^6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
```

## Development Setup

1. Install Poetry:
```bash
curl -sSL https://install.python-poetry.org | python3 -
```

2. Configure Poetry to create virtual environments in the project directory:
```bash
poetry config virtualenvs.in-project true
```

3. Install dependencies:
```bash
poetry install
```

## Best Practices

1. Always use Poetry for dependency management
2. Keep `poetry.lock` in version control
3. Use dependency groups for development tools
4. Specify exact versions for critical dependencies
5. Use semantic versioning for your packages

## Common Commands

- `poetry add package-name` - Add a new dependency
- `poetry add --group dev package-name` - Add a development dependency
- `poetry install` - Install all dependencies
- `poetry update` - Update dependencies
- `poetry run python script.py` - Run a Python script
- `poetry shell` - Activate the virtual environment

## Code Quality Tools

All projects should include these development dependencies:

- `black` - Code formatting
- `isort` - Import sorting
- `flake8` - Code linting
- `pytest` - Testing framework

## Docker Integration

When using Docker, ensure your Dockerfile uses Poetry for dependency management:

```dockerfile
FROM python:3.13-slim

# Install Poetry
RUN pip install poetry

# Configure Poetry
RUN poetry config virtualenvs.create false

# Copy project files
COPY pyproject.toml poetry.lock ./

# Install dependencies
RUN poetry install --no-dev --no-interaction --no-ansi

# Copy application code
COPY . .

# Run the application
CMD ["python", "src/main.py"]
```
