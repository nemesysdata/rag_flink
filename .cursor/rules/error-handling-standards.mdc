---
description: 
globs: 
alwaysApply: false
---
# Error Handling and Solution Selection Standards

When encountering errors or issues in the codebase, follow this structured approach to ensure thorough analysis and appropriate solutions.

## Solution Selection Process

1. **Research Phase**
   - Search for 5-7 potential solutions to the problem
   - Document each solution with its pros and cons
   - Consider impact on:
     - Performance
     - Security
     - Maintainability
     - Scalability
     - Existing architecture

2. **Analysis Phase**
   - Evaluate solutions against project requirements
   - Consider compatibility with:
     - Current Python version (3.13)
     - Poetry dependency management
     - Cloud Run deployment
     - Kafka integration
     - Existing error handling patterns

3. **Selection Criteria**
   - Choose the 2 most suitable solutions based on:
     - Alignment with project architecture
     - Minimal impact on existing code
     - Long-term maintainability
     - Security implications
     - Performance considerations

4. **Proposal Format**
   When proposing a solution, include:
   ```markdown
   ## Problem Description
   [Clear description of the issue]

   ## Proposed Solutions
   ### Solution 1: [Name]
   - Description: [Brief explanation]
   - Pros:
     - [Benefit 1]
     - [Benefit 2]
   - Cons:
     - [Drawback 1]
     - [Drawback 2]
   - Implementation Impact: [Description]

   ### Solution 2: [Name]
   - Description: [Brief explanation]
   - Pros:
     - [Benefit 1]
     - [Benefit 2]
   - Cons:
     - [Drawback 1]
     - [Drawback 2]
   - Implementation Impact: [Description]

   ## Recommended Approach
   [Explanation of why this solution is recommended]

   ## Implementation Plan
   1. [Step 1]
   2. [Step 2]
   3. [Step 3]
   ```

5. **Approval Process**
   - Present both solutions to the team
   - Wait for explicit approval before implementation
   - Document the chosen solution and reasoning
   - Update relevant documentation

## Implementation Guidelines

1. **Code Changes**
   - Make changes in a new branch
   - Follow existing code style
   - Include comprehensive comments
   - Add appropriate logging
   - Update tests if necessary

2. **Documentation**
   - Update relevant documentation
   - Add comments explaining the solution
   - Document any new dependencies
   - Update environment variables if needed

3. **Testing**
   - Test the solution thoroughly
   - Include edge cases
   - Verify in local environment
   - Test in staging if available

4. **Review**
   - Request code review
   - Ensure all team members understand the solution
   - Verify no unintended side effects
   - Check performance impact

## Example Solution Proposal

```markdown
## Problem Description
Kafka consumer failing to deserialize Avro messages due to schema mismatch.

## Proposed Solutions
### Solution 1: Schema Version Management
- Description: Implement schema version tracking and compatibility checks
- Pros:
  - Handles schema evolution gracefully
  - Prevents data loss
  - Maintains backward compatibility
- Cons:
  - Additional complexity
  - Requires schema registry configuration
- Implementation Impact: Moderate

### Solution 2: Error Recovery with Dead Letter Queue
- Description: Implement dead letter queue for failed messages
- Pros:
  - Simple to implement
  - Prevents message loss
  - Easy to monitor and debug
- Cons:
  - Requires additional topic
  - Manual intervention needed
- Implementation Impact: Low

## Recommended Approach
Solution 1 is recommended due to its robust handling of schema evolution.

## Implementation Plan
1. Add schema version tracking
2. Implement compatibility checks
3. Update error handling
4. Add monitoring
```

## Best Practices

1. Always document the research process
2. Consider long-term implications
3. Think about scalability
4. Maintain security standards
5. Follow existing patterns
6. Consider team's expertise
7. Plan for future maintenance
